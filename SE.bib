%% Created using Papers on Mon, 09 Feb 2015.
%% http://papersapp.com/papers/

@inproceedings{Ma:2011gq,
author = {Ma, Kin-Keung and Phang, Khoo Yit and Foster, Jeffrey S and Hicks, Michael},
title = {{Directed symbolic execution}},
booktitle = {SAS'11: Proceedings of the 18th international conference on Static analysis},
year = {2011},
publisher = {~Springer-Verlag},
month = sep,
read = {Yes},
rating = {0},
date-added = {2014-12-08T17:20:52GMT},
date-modified = {2015-02-09T04:58:35GMT},
abstract = {In this paper, we study the problem of automatically finding program executions that reach a particular target line. This problem arises in many debugging scenarios; for example, a developer may want to confirm that a bug reported by a static analysis},
url = {http://dl.acm.org/citation.cfm?id=2041552.2041563&coll=DL&dl=GUIDE&CFID=477901319&CFTOKEN=83338306},
local-url = {file://localhost/Users/hongxu/Dropbox/PAPERS/Library.papers3/Files/15/1567A118-7ED6-4AA2-BC09-F6C0769A22FD.pdf},
file = {{1567A118-7ED6-4AA2-BC09-F6C0769A22FD.pdf:/Users/hongxu/Dropbox/PAPERS/Library.papers3/Files/15/1567A118-7ED6-4AA2-BC09-F6C0769A22FD.pdf:application/pdf;1567A118-7ED6-4AA2-BC09-F6C0769A22FD.pdf:/Users/hongxu/Dropbox/PAPERS/Library.papers3/Files/15/1567A118-7ED6-4AA2-BC09-F6C0769A22FD.pdf:application/pdf}},
uri = {\url{papers3://publication/uuid/19AD799C-AE2D-4195-8918-E08B30221018}}
}

@inproceedings{Kuznetsov:2012id,
author = {Kuznetsov, Volodymyr and Kinder, Johannes and Bucur, Stefan and Candea, George},
title = {{Efficient state merging in symbolic execution}},
booktitle = {PLDI '12: Proceedings of the 33rd ACM SIGPLAN conference on Programming Language Design and Implementation},
year = {2012},
pages = {193},
publisher = {~ACM  Request Permissions},
address = {New York, New York, USA},
month = aug,
doi = {10.1145/2254064.2254088},
isbn = {9781450312059},
read = {Yes},
rating = {0},
date-added = {2014-12-08T17:20:47GMT},
date-modified = {2015-02-09T04:58:35GMT},
abstract = {Symbolic execution has proven to be a practical technique for building automated test case generation and bug finding tools. Nevertheless, due to state explosion, these tools still struggle to achieve scalability. Given a program, one way to reduce the},
url = {http://dl.acm.org/citation.cfm?doid=2254064.2254088},
local-url = {file://localhost/Users/hongxu/Dropbox/PAPERS/Library.papers3/Files/CF/CFAE99CE-9C53-46C3-ABC3-838EBC468C3E.pdf},
file = {{CFAE99CE-9C53-46C3-ABC3-838EBC468C3E.pdf:/Users/hongxu/Dropbox/PAPERS/Library.papers3/Files/CF/CFAE99CE-9C53-46C3-ABC3-838EBC468C3E.pdf:application/pdf;CFAE99CE-9C53-46C3-ABC3-838EBC468C3E.pdf:/Users/hongxu/Dropbox/PAPERS/Library.papers3/Files/CF/CFAE99CE-9C53-46C3-ABC3-838EBC468C3E.pdf:application/pdf}},
uri = {\url{papers3://publication/doi/10.1145/2254064.2254088}}
}

@inproceedings{Cadar:2008we,
author = {Cadar, Cristian and Dunbar, Daniel and Engler, Dawson},
title = {{KLEE: unassisted and automatic generation of high-coverage tests for complex systems programs}},
booktitle = {OSDI'08: Proceedings of the 8th USENIX conference on Operating systems design and implementation},
year = {2008},
publisher = {~USENIX Association},
month = dec,
keywords = {KLEE, symbolic execution},
read = {Yes},
rating = {5},
date-added = {2014-12-08T17:20:52GMT},
date-modified = {2015-02-09T04:58:35GMT},
abstract = {We present a new symbolic execution tool, KLEE, capable of automatically generating tests that achieve high coverage on a diverse set of complex and environmentally-intensive programs. We used KLEE to thoroughly check all 89 stand-alone programs in the},
url = {http://dl.acm.org/citation.cfm?id=1855741.1855756&coll=DL&dl=GUIDE&CFID=477901319&CFTOKEN=83338306},
local-url = {file://localhost/Users/hongxu/Dropbox/PAPERS/Library.papers3/Files/C4/C4FE7BEB-F0CC-48EB-A5F4-9AD3DA47703F.pdf},
file = {{C4FE7BEB-F0CC-48EB-A5F4-9AD3DA47703F.pdf:/Users/hongxu/Dropbox/PAPERS/Library.papers3/Files/C4/C4FE7BEB-F0CC-48EB-A5F4-9AD3DA47703F.pdf:application/pdf;C4FE7BEB-F0CC-48EB-A5F4-9AD3DA47703F.pdf:/Users/hongxu/Dropbox/PAPERS/Library.papers3/Files/C4/C4FE7BEB-F0CC-48EB-A5F4-9AD3DA47703F.pdf:application/pdf}},
uri = {\url{papers3://publication/uuid/232FDC51-5AD0-4BBE-BA61-2073B8046A42}}
}

@inproceedings{Marinescu:2013jz,
author = {Marinescu, P D and Cadar, C},
title = {{KATCH: High-coverage testing of software patches}},
booktitle = {Proceedings of the 2013 9th Joint Meeting on {\ldots}},
year = {2013},
doi = {10.1145/2491411.2491438},
read = {Yes},
rating = {0},
date-added = {2015-02-05T02:10:46GMT},
date-modified = {2015-02-09T02:23:11GMT},
abstract = {... Publication rights licensed to ACM. ACM 978-1-4503-2237-9/13/08 ...$15.00 http://dx.doi.org/ 10.1145 / 2491411.2491438 . repository ... ESEC/FSE'13, August 18{\textendash}26, 2013, Saint Petersburg, Russia ACM 978-1-4503-2237-9/13/08 http://dx.doi.org/ 10.1145 / 2491411.2491438 235 ... 
},
url = {http://dl.acm.org/citation.cfm?id=2491438},
local-url = {file://localhost/Users/hongxu/Dropbox/PAPERS/Library.papers3/Files/31/315344C3-C2A7-4155-8BEA-70AA5786A2D1.pdf},
file = {{315344C3-C2A7-4155-8BEA-70AA5786A2D1.pdf:/Users/hongxu/Dropbox/PAPERS/Library.papers3/Files/31/315344C3-C2A7-4155-8BEA-70AA5786A2D1.pdf:application/pdf;315344C3-C2A7-4155-8BEA-70AA5786A2D1.pdf:/Users/hongxu/Dropbox/PAPERS/Library.papers3/Files/31/315344C3-C2A7-4155-8BEA-70AA5786A2D1.pdf:application/pdf}},
uri = {\url{papers3://publication/doi/10.1145/2491411.2491438}}
}

@article{Godefroid:2008ub,
author = {Godefroid, P and Levin, M Y and Molnar, D A},
title = {{Automated Whitebox Fuzz Testing}},
journal = {NDSS},
year = {2008},
read = {Yes},
rating = {0},
date-added = {2015-02-05T09:48:00GMT},
date-modified = {2015-02-09T04:58:35GMT},
abstract = {Abstract Fuzz testing is an effective technique for finding security vulnerabilities in software. Traditionally, fuzz testing tools apply random mutations to well-formed inputs of a program and test the resulting values. We present an alternative whitebox fuzz testing approach ... 
},
url = {http://46.43.36.213/sites/default/files/Automated%20Whitebox%20Fuzz%20Testing%20(paper)%20(Patrice%20Godefroid).pdf},
local-url = {file://localhost/Users/hongxu/Dropbox/PAPERS/Library.papers3/Files/29/29780FA8-B4F5-40B1-83B2-5904162DEC55.pdf},
file = {{29780FA8-B4F5-40B1-83B2-5904162DEC55.pdf:/Users/hongxu/Dropbox/PAPERS/Library.papers3/Files/29/29780FA8-B4F5-40B1-83B2-5904162DEC55.pdf:application/pdf}},
uri = {\url{papers3://publication/uuid/333F1CAD-00E2-4B82-8BB3-4E540D8C80AA}}
}

@article{Cui:2013hl,
author = {Cui, H and Hu, G and Wu, J and Yang, J},
title = {{Verifying systems rules using rule-directed symbolic execution}},
year = {2013},
doi = {10.1145/2451116.2451152},
read = {Yes},
rating = {0},
date-added = {2015-02-06T05:07:39GMT},
date-modified = {2015-02-09T04:58:35GMT},
abstract = {Page 1. Verifying Systems Rules Using Rule-Directed Symbolic Execution Heming Cui{\textasteriskcentered} Gang Hu{\textasteriskcentered} Jingyue Wu Junfeng Yang {heming,ganghu,jingyue,junfeng}@ cs.columbia.edu Columbia University Abstract Systems code ... 
},
url = {http://dl.acm.org/citation.cfm?id=2451152},
local-url = {file://localhost/Users/hongxu/Dropbox/PAPERS/Library.papers3/Files/C5/C545A5D0-8B59-4DE2-A7C7-3A01C3A0971B.pdf},
file = {{C545A5D0-8B59-4DE2-A7C7-3A01C3A0971B.pdf:/Users/hongxu/Dropbox/PAPERS/Library.papers3/Files/C5/C545A5D0-8B59-4DE2-A7C7-3A01C3A0971B.pdf:application/pdf;C545A5D0-8B59-4DE2-A7C7-3A01C3A0971B.pdf:/Users/hongxu/Dropbox/PAPERS/Library.papers3/Files/C5/C545A5D0-8B59-4DE2-A7C7-3A01C3A0971B.pdf:application/pdf}},
uri = {\url{papers3://publication/doi/10.1145/2451116.2451152}}
}

@article{Pham:2015ud,
author = {Pham, Van-Thuan and Ng, Wei Boon},
title = {{Hercules: Reproducing Crashes in Real-World Application Binaries}},
year = {2015},
pages = {1--11},
month = jan,
rating = {0},
date-added = {2015-02-01T15:28:20GMT},
date-modified = {2015-02-09T02:23:11GMT},
url = {https://inbox.google.com/},
local-url = {file://localhost/Users/hongxu/Dropbox/PAPERS/Library.papers3/Files/99/99C608C9-DE55-40B7-A2CA-A0903E635575.pdf},
file = {{99C608C9-DE55-40B7-A2CA-A0903E635575.pdf:/Users/hongxu/Dropbox/PAPERS/Library.papers3/Files/99/99C608C9-DE55-40B7-A2CA-A0903E635575.pdf:application/pdf}},
uri = {\url{papers3://publication/uuid/4E255490-8BC8-4D93-9042-D81142193DC7}}
}

@techreport{export:115271,
author = {Gulwani, Sumit and Juvekar, Sudeep},
title = {{Bound Analysis using Backward Symbolic Execution}},
year = {2009},
month = oct,
publisher = {Microsoft Research},
rating = {0},
date-added = {2015-02-09T02:37:46GMT},
date-modified = {2015-02-09T02:38:29GMT},
abstract = {<p>A fundamental problem that arises frequently in quantitative program analysis (e.g., resource usage analysis) is that of computing an upper bound for a given arithmetic expression at a given program location in terms of the procedure inputs. We refer to this problem as bound analysis. The problem is theoretically as well as practically challenging because of variable updates inside loops and presence of virtual methods.</p> <p>Our solution to the bound analysis problem involves an inter-procedural (goal-directed) backward analysis built on top of an SMT solver. The analysis has the advantage of dealing with arbitrary operators that are understood by the underlying SMT solver. The analysis uses novel proof-rule based non-iterative technique to reason about updates inside loops, which makes it quite scalable. It uses user-defined abstract implementations to trace back across virtual methods arising from use of interfaces or extensible types.</p> <p>We have implemented the analysis inside the SPEED tool, which computes symbolic computational complexity bounds for procedures. Our analysis is used to translate bounds on number of loop iterations and cost of method calls to respective bounds in terms of procedure inputs. We have evaluated the precision and scalability of the analysis over 4 .NET assemblies that together contained thousands of methods and resulted in 9152 queries to the analysis. The analysis was able to answer 90% of the queries on an average of 0.23 seconds per query.</p>},
url = {http://research.microsoft.com/apps/pubs/default.aspx?id=115271},
local-url = {file://localhost/Users/hongxu/Dropbox/PAPERS/Library.papers3/Files/7F/7FA899BB-BDE7-483E-B546-E6F613D6D3E4.pdf},
file = {{7FA899BB-BDE7-483E-B546-E6F613D6D3E4.pdf:/Users/hongxu/Dropbox/PAPERS/Library.papers3/Files/7F/7FA899BB-BDE7-483E-B546-E6F613D6D3E4.pdf:application/pdf;7FA899BB-BDE7-483E-B546-E6F613D6D3E4.pdf:/Users/hongxu/Dropbox/PAPERS/Library.papers3/Files/7F/7FA899BB-BDE7-483E-B546-E6F613D6D3E4.pdf:application/pdf}},
uri = {\url{papers3://publication/uuid/A01030B7-C4D6-4C73-8E2B-55657A3F1D3F}}
}

@article{Chen:2013be,
author = {Chen, Ting and Zhang, Xiao-song and Guo, Shi-ze and Li, Hong-yuan and Wu, Yue},
title = {{State of the art: Dynamic symbolic execution for automated test generation}},
journal = {Future Generation Computer Systems},
year = {2013},
volume = {29},
number = {7},
month = sep,
publisher = {~Elsevier Science Publishers B. V},
doi = {10.1016/j.future.2012.02.006},
read = {Yes},
rating = {0},
date-added = {2015-02-01T14:52:35GMT},
date-modified = {2015-02-09T04:58:35GMT},
abstract = {Dynamic symbolic execution for automated test generation consists of instrumenting and running a program while collecting path constraint on inputs from predicates encountered in branch instructions, and of deriving new inputs from a previous path constraint},
url = {http://dl.acm.org/citation.cfm?id=2489313.2489467&coll=DL&dl=GUIDE&CFID=623193493&CFTOKEN=36730246},
local-url = {file://localhost/Users/hongxu/Dropbox/PAPERS/Library.papers3/Files/E8/E80B0BB6-E480-4587-A431-4DE00F8C76EE.pdf},
file = {{E80B0BB6-E480-4587-A431-4DE00F8C76EE.pdf:/Users/hongxu/Dropbox/PAPERS/Library.papers3/Files/E8/E80B0BB6-E480-4587-A431-4DE00F8C76EE.pdf:application/pdf;E80B0BB6-E480-4587-A431-4DE00F8C76EE.pdf:/Users/hongxu/Dropbox/PAPERS/Library.papers3/Files/E8/E80B0BB6-E480-4587-A431-4DE00F8C76EE.pdf:application/pdf}},
uri = {\url{papers3://publication/doi/10.1016/j.future.2012.02.006}}
}

@inproceedings{Bucur:2011bp,
author = {Bucur, Stefan and Ureche, Vlad and Zamfir, Cristian and Candea, George},
title = {{Parallel symbolic execution for automated real-world software testing}},
booktitle = {EuroSys '11: Proceedings of the sixth conference on Computer systems},
year = {2011},
pages = {183--198},
publisher = {~ACM  Request Permissions},
address = {New York, New York, USA},
month = apr,
doi = {10.1145/1966445.1966463},
isbn = {9781450306348},
read = {Yes},
rating = {0},
date-added = {2015-02-05T09:10:56GMT},
date-modified = {2015-02-09T04:58:35GMT},
abstract = {This paper introduces Cloud9, a platform for automated testing of real-world software. Our main contribution is the scalable parallelization of symbolic execution on clusters of commodity hardware, to help cope with path explosion. Cloud9 provides a},
url = {http://portal.acm.org/citation.cfm?doid=1966445.1966463},
local-url = {file://localhost/Users/hongxu/Dropbox/PAPERS/Library.papers3/Files/FE/FE74B1FA-9F7E-4518-ABE0-C1E0EB68E8D1.pdf},
file = {{FE74B1FA-9F7E-4518-ABE0-C1E0EB68E8D1.pdf:/Users/hongxu/Dropbox/PAPERS/Library.papers3/Files/FE/FE74B1FA-9F7E-4518-ABE0-C1E0EB68E8D1.pdf:application/pdf;FE74B1FA-9F7E-4518-ABE0-C1E0EB68E8D1.pdf:/Users/hongxu/Dropbox/PAPERS/Library.papers3/Files/FE/FE74B1FA-9F7E-4518-ABE0-C1E0EB68E8D1.pdf:application/pdf}},
uri = {\url{papers3://publication/doi/10.1145/1966445.1966463}}
}

@inproceedings{Ma:2014jm,
author = {Ma, Jinxin and Dong, Guowei and Zhang, Puhan and Guo, Tao},
title = {{SymWalker: Symbolic Execution in Routines of Binary Code}},
booktitle = {Computational Intelligence and Security (CIS), 2014 Tenth International Conference on},
year = {2014},
pages = {694--698},
publisher = {IEEE},
doi = {10.1109/CIS.2014.16},
isbn = {978-1-4799-7434-4},
read = {Yes},
rating = {0},
date-added = {2015-02-01T05:00:53GMT},
date-modified = {2015-02-09T04:58:35GMT},
abstract = {Detecting vulnerabilities in binary codes is one of the most difficult problems due to the lack of type information and symbols. We propose a novel tool to perform symbolic execution inside the routines of binary codes, providing easy static analysis for vulnerability detection. Compared with existing systems, our tool has four properties: first, it could work on binary codes without source codes, second, it employs the VEX language for program analysis, thus having no side effects, third, it could deliver high coverage by statically executing on control flow graphs of disassembly codes, fourth, two security property rules are summarized to detect the corresponding vulnerabilities, based on which a convenient interface is provided for developers to detecting vulnerabilities, such as buffer overflow, improper memory access, and etc. Experimental results on real software binary files show that our tool could efficiently detect different types of vulnerabilities. View full abstract},
url = {http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=7016986},
local-url = {file://localhost/Users/hongxu/Dropbox/PAPERS/Library.papers3/Files/38/388528D9-346B-4BB5-BB35-0680D167DC65.pdf},
file = {{388528D9-346B-4BB5-BB35-0680D167DC65.pdf:/Users/hongxu/Dropbox/PAPERS/Library.papers3/Files/38/388528D9-346B-4BB5-BB35-0680D167DC65.pdf:application/pdf;388528D9-346B-4BB5-BB35-0680D167DC65.pdf:/Users/hongxu/Dropbox/PAPERS/Library.papers3/Files/38/388528D9-346B-4BB5-BB35-0680D167DC65.pdf:application/pdf}},
uri = {\url{papers3://publication/doi/10.1109/CIS.2014.16}}
}

@inproceedings{Cadar:2011js,
author = {Cadar, Cristian and Godefroid, P and Khurshid, S and Pasareanu, C S and Sen, Koushik and Tillmann, N and Visser, W},
title = {{Symbolic execution for software testing in practice: preliminary assessment}},
booktitle = {Software Engineering (ICSE), 2011 33rd International Conference on},
year = {2011},
pages = {1066--1071},
publisher = {ACM Press},
address = {New York, New York, USA},
doi = {10.1145/1985793.1985995},
isbn = {9781450304450},
read = {Yes},
rating = {0},
date-added = {2014-12-08T17:20:52GMT},
date-modified = {2015-02-09T04:58:35GMT},
abstract = {We present results for the "Impact Project Focus Area" on the topic of symbolic execution as used in software testing. Symbolic execution is a program analysis technique introduced in the 70s that has received renewed interest in recent years, due to algorithmic advances and increased availability of computational power and constraint solving technology. We review classical symbolic execution and some modern extensions such as generalized symbolic execution and dynamic test generation. We also give a preliminary assessment of the use in academia, research labs, and industry. View full abstract},
url = {http://portal.acm.org/citation.cfm?doid=1985793.1985995},
local-url = {file://localhost/Users/hongxu/Dropbox/PAPERS/Library.papers3/Files/0C/0C866C78-B3C9-4849-8498-046F7BB2D042.pdf},
file = {{0C866C78-B3C9-4849-8498-046F7BB2D042.pdf:/Users/hongxu/Dropbox/PAPERS/Library.papers3/Files/0C/0C866C78-B3C9-4849-8498-046F7BB2D042.pdf:application/pdf}},
uri = {\url{papers3://publication/doi/10.1145/1985793.1985995}}
}

@article{Chipounov:2012ci,
author = {Chipounov, Vitaly and Kuznetsov, Volodymyr and Candea, George},
title = {{The S2E Platform: Design, Implementation, and Applications}},
year = {2012},
volume = {30},
number = {1},
month = feb,
doi = {10.1145/2110356.2110358},
read = {Yes},
rating = {0},
date-added = {2015-02-06T04:54:35GMT},
date-modified = {2015-02-09T04:58:35GMT},
abstract = {This article presents S2E, a platform for analyzing the properties and behavior of software systems, along with its use in developing tools for comprehensive performance profiling, reverse engineering of proprietary software, and automated},
url = {http://dl.acm.org/citation.cfm?id=2110356.2110358&coll=DL&dl=GUIDE&CFID=623193493&CFTOKEN=36730246},
local-url = {file://localhost/Users/hongxu/Dropbox/PAPERS/Library.papers3/Files/F1/F18B1B14-DDB0-4268-9770-754265665EC4.pdf},
file = {{F18B1B14-DDB0-4268-9770-754265665EC4.pdf:/Users/hongxu/Dropbox/PAPERS/Library.papers3/Files/F1/F18B1B14-DDB0-4268-9770-754265665EC4.pdf:application/pdf;F18B1B14-DDB0-4268-9770-754265665EC4.pdf:/Users/hongxu/Dropbox/PAPERS/Library.papers3/Files/F1/F18B1B14-DDB0-4268-9770-754265665EC4.pdf:application/pdf}},
uri = {\url{papers3://publication/doi/10.1145/2110356.2110358}}
}

@article{King:1976ij,
author = {King, James C},
title = {{Symbolic Execution and Program Testing.}},
journal = {CACM},
year = {1976},
volume = {19},
number = {7},
pages = {385--394},
publisher = {ACM},
doi = {10.1145/360248.360252},
rating = {0},
date-added = {2015-01-31T11:57:34GMT},
date-modified = {2015-02-09T02:23:11GMT},
url = {http://doi.acm.org/10.1145/360248.360252},
local-url = {file://localhost/Users/hongxu/Dropbox/PAPERS/Library.papers3/Files/F5/F54BC294-47CF-4C1C-903F-9602322706FC.pdf},
file = {{F54BC294-47CF-4C1C-903F-9602322706FC.pdf:/Users/hongxu/Dropbox/PAPERS/Library.papers3/Files/F5/F54BC294-47CF-4C1C-903F-9602322706FC.pdf:application/pdf;F54BC294-47CF-4C1C-903F-9602322706FC.pdf:/Users/hongxu/Dropbox/PAPERS/Library.papers3/Files/F5/F54BC294-47CF-4C1C-903F-9602322706FC.pdf:application/pdf}},
uri = {\url{papers3://publication/doi/10.1145/360248.360252}}
}

@book{Schwartz:2010jd,
author = {Schwartz, Edward J and Avgerinos, Thanassis and Brumley, David},
title = {{All You Ever Wanted to Know about Dynamic Taint Analysis and Forward Symbolic Execution (but Might Have Been Afraid to Ask)}},
publisher = {IEEE Computer Society},
year = {2010},
month = may,
doi = {10.1109/SP.2010.26},
isbn = {978-0-7695-4035-1},
issn = {1081-6011},
language = {English},
read = {Yes},
rating = {0},
date-added = {2014-12-08T17:20:52GMT},
date-modified = {2015-02-09T04:58:35GMT},
abstract = {Dynamic taint analysis and forward symbolic execution are quickly becoming staple techniques in security analyses. Example applications of dynamic taint analysis and forward symbolic execution include malware analysis, input filter generation, test c...},
url = {http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=5504796},
local-url = {file://localhost/Users/hongxu/Dropbox/PAPERS/Library.papers3/Files/8E/8EDCB00B-16B9-488B-A2BF-78A9A238B618.pdf},
file = {{8EDCB00B-16B9-488B-A2BF-78A9A238B618.pdf:/Users/hongxu/Dropbox/PAPERS/Library.papers3/Files/8E/8EDCB00B-16B9-488B-A2BF-78A9A238B618.pdf:application/pdf;8EDCB00B-16B9-488B-A2BF-78A9A238B618.pdf:/Users/hongxu/Dropbox/PAPERS/Library.papers3/Files/8E/8EDCB00B-16B9-488B-A2BF-78A9A238B618.pdf:application/pdf}},
uri = {\url{papers3://publication/doi/10.1109/SP.2010.26}}
}

@inproceedings{Avgerinos:2014br,
author = {Avgerinos, Thanassis and Rebert, Alexandre and Cha, Sang Kil and Brumley, David},
title = {{Enhancing symbolic execution with veritesting}},
booktitle = {ICSE '14: Proceedings of the 36th International Conference on Software Engineering},
year = {2014},
pages = {1083--1094},
publisher = {~ACM  Request Permissions},
address = {New York, New York, USA},
month = may,
doi = {10.1145/2568225.2568293},
isbn = {9781450327565},
read = {Yes},
rating = {0},
date-added = {2014-12-08T17:20:52GMT},
date-modified = {2015-02-09T05:34:18GMT},
abstract = {We present MergePoint, a new binary-only symbolic execution system for large-scale and fully unassisted testing of commodity off-the-shelf (COTS) software. MergePoint introduces veritesting, a new technique that employs static symbolic execution to},
url = {http://dl.acm.org/citation.cfm?doid=2568225.2568293},
local-url = {file://localhost/Users/hongxu/Dropbox/PAPERS/Library.papers3/Files/9B/9B7B78C2-938E-4C38-A578-A7F29F0FB3C8.pdf},
file = {{9B7B78C2-938E-4C38-A578-A7F29F0FB3C8.pdf:/Users/hongxu/Dropbox/PAPERS/Library.papers3/Files/9B/9B7B78C2-938E-4C38-A578-A7F29F0FB3C8.pdf:application/pdf;9B7B78C2-938E-4C38-A578-A7F29F0FB3C8.pdf:/Users/hongxu/Dropbox/PAPERS/Library.papers3/Files/9B/9B7B78C2-938E-4C38-A578-A7F29F0FB3C8.pdf:application/pdf}},
uri = {\url{papers3://publication/doi/10.1145/2568225.2568293}}
}

@inproceedings{Li:2013ip,
author = {Li, You and Su, Zhendong and Wang, Linzhang and Li, Xuandong},
title = {{Steering symbolic execution to less traveled paths}},
booktitle = {OOPSLA  '13: Proceedings of the ACM international conference on Object oriented programming systems languages and applications},
year = {2013},
pages = {19--32},
publisher = {ACM Press},
address = {New York, New York, USA},
doi = {10.1145/2509136.2509553},
isbn = {9781450323741},
read = {Yes},
rating = {0},
date-added = {2014-12-08T17:20:52GMT},
date-modified = {2015-02-09T04:58:35GMT},
url = {http://dl.acm.org/citation.cfm?doid=2509136.2509553},
local-url = {file://localhost/Users/hongxu/Dropbox/PAPERS/Library.papers3/Files/C3/C312CA9D-32B0-4D1B-B530-59682A6243E0.pdf},
file = {{C312CA9D-32B0-4D1B-B530-59682A6243E0.pdf:/Users/hongxu/Dropbox/PAPERS/Library.papers3/Files/C3/C312CA9D-32B0-4D1B-B530-59682A6243E0.pdf:application/pdf}},
uri = {\url{papers3://publication/doi/10.1145/2509136.2509553}}
}

@article{Pasareanu:2009hz,
author = {P{\u{a}}s{\u{a}}reanu, Corina S and Visser, Willem},
title = {{A survey of new trends in symbolic execution for software testing and analysis}},
journal = {International Journal on Software Tools for Technology Transfer (STTT)},
year = {2009},
volume = {11},
number = {4},
month = oct,
publisher = {~Springer-Verlag},
doi = {10.1007/s10009-009-0118-1},
read = {Yes},
rating = {0},
date-added = {2014-12-08T17:20:52GMT},
date-modified = {2015-02-09T04:58:21GMT},
abstract = {Symbolic execution is a well-known program analysis technique which represents program inputs with symbolic values instead of concrete, initialized, data and executes the program by manipulating program expressions involving the symbolic values. Symbolic},
url = {http://link.springer.com/article/10.1007/s10009-009-0118-1},
local-url = {file://localhost/Users/hongxu/Dropbox/PAPERS/Library.papers3/Files/94/946955F3-639E-4648-9845-3DD8138F411A.pdf},
file = {{946955F3-639E-4648-9845-3DD8138F411A.pdf:/Users/hongxu/Dropbox/PAPERS/Library.papers3/Files/94/946955F3-639E-4648-9845-3DD8138F411A.pdf:application/pdf;946955F3-639E-4648-9845-3DD8138F411A.pdf:/Users/hongxu/Dropbox/PAPERS/Library.papers3/Files/94/946955F3-639E-4648-9845-3DD8138F411A.pdf:application/pdf}},
uri = {\url{papers3://publication/doi/10.1007/s10009-009-0118-1}}
}

